security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    encoders:
        # this internal class is used by Symfony to represent in-memory users
        Symfony\Component\Security\Core\User\User: 'auto'

    providers:
        managers_in_memory:
            memory:
                users:
                    # ОБЯЗАТЕЛЬНО СМЕНИТЬ ВСЕ ЯВКИ ПОСЛЕ
                    # nuzhnopomenat123
                    mdv: { password: '$2y$13$5l/aCZg3rZa4U54VAJGOI.MpXYQmvsDyDz0rrhefnoy3yAUSjgjJ.', roles: ['ROLE_MANAGER'] }
                    mdv2: { password: '$2y$13$dCoO9VLrZqZrNd7hPxKuo.dbDtwGexUwNrsVuXJfClCD.ZKxlaIkG', roles: ['ROLE_MANAGER'] }
                    mdv3: { password: '$2y$13$hipkXIUAF9H2g8I3Iz8ZtuFVBxmJ7StE3Lbqroiuiq3Hi.Ge4lqaS', roles: ['ROLE_MANAGER'] }
                    mdv4: { password: '$2y$13$GMHDlAun7/KvjhVFwLhVsu3t9Q/OpteyaEBWtg.G1jMaV1s00rRz2', roles: ['ROLE_MANAGER'] }

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        main:
            anonymous: lazy
            http_basic:
                realm: Secured Area

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
         - { path: '^/manager', roles: ROLE_MANAGER }
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
